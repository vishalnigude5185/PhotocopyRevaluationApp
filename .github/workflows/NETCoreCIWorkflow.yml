# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

#name: .NET

# on:
#   push:
#     branches: [ "master" ]
#   pull_request:
#     branches: [ "master" ]

# jobs:
#   build:

#     runs-on: ubuntu-latest

#     steps:
#     - uses: actions/checkout@v4
#     - name: Setup .NET
#       uses: actions/setup-dotnet@v4
#       with:
#         dotnet-version: 8.0.x
#     - name: Restore dependencies
#       run: dotnet restore
#     - name: Build
#       run: dotnet build --no-restore
#     - name: Test
#       run: dotnet test --no-build --verbosity normal

name: .NET Core CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '8.0.x'  # Specify your .NET SDK version

    - name: Cache NuGet packages
      uses: actions/cache@v2
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Run tests
      run: dotnet test --no-restore --verbosity normal

      Customizing Which Tests to Run:
      1. Target Specific Test Projects:
      - name: Run specific test project
    run: dotnet test MyApp.Tests/MyApp.Tests.csproj --no-restore --configuration Release

      2. Filter Tests by Category:
      - name: Run tests with a specific trait
    run: dotnet test --filter Category=UnitTests

      Run Tests in a Specific Assembly:
      - name: Run tests in a specific assembly
    run: dotnet test path/to/test/assembly/MyApp.Tests.dll

    4. Run Tests by Namespace or Class:
    - name: Run specific class tests
    run: dotnet test --filter FullyQualifiedName~MyApp.Tests.Controllers.SearchControllerTests

    #5. Running Specific Tests:
    - name: Run only unit tests
      run: dotnet test --filter TestCategory=Unit

    - name: Publish
      run: dotnet publish --configuration Release --output ./publish

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Deploy to Railway
      env:
        RAILWAY_API_KEY: ${{ secrets.RAILWAY_API_KEY }}  # Set your Railway API key in GitHub Secrets
      run: |
        curl -X POST https://railway.app/api/v1/deploy \
          -H "Authorization: Bearer $RAILWAY_API_KEY" \
          -H "Content-Type: application/json" \
          -d '{
            "projectId": "<your_project_id>",  # Replace with your Railway project ID
            "branch": "main"
          }'

  notify:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Send Deployment Notification
      uses: peter-evans/slack-notify@v2
      with:
        status: success
        webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}  # Set your Slack webhook URL in GitHub Secrets
        message: 'Deployment to Railway was successful!'
